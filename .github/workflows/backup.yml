name: Supabase Database Backup - PRODUCTION
on:
  schedule:
    - cron: '0 2 * * *'  # Chaque nuit à 2h00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: supabase/setup-cli@v1
      
      - name: Create backup directory
        run: |
          BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p $BACKUP_DIR
          echo "BACKUP_DIR=$BACKUP_DIR" >> $GITHUB_ENV
          echo "BACKUP_DATE=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
      
      - name: 🔒 Backup database schema (structure)
        run: |
          echo "📦 Backing up database schema..."
          supabase db dump --db-url "${{ secrets.SUPABASE_DB_URL }}" --schema public --schema-only > $BACKUP_DIR/schema.sql
          echo "✅ Schema backup completed"
      
      - name: 📊 Backup database data (données métier)
        run: |
          echo "📦 Backing up database data..."
          supabase db dump --db-url "${{ secrets.SUPABASE_DB_URL }}" --schema public --data-only > $BACKUP_DIR/data.sql
          echo "✅ Data backup completed"
      
      - name: 👥 Backup auth users (utilisateurs)
        run: |
          echo "📦 Backing up auth users..."
          supabase db dump --db-url "${{ secrets.SUPABASE_DB_URL }}" --schema auth --data-only > $BACKUP_DIR/auth_users.sql
          echo "✅ Auth users backup completed"
      
      - name: 📝 Create restoration guide
        run: |
          cat > $BACKUP_DIR/RESTORE.md << 'EOF'
          # 🔄 GUIDE DE RESTAURATION - ACLEF Pédagogie

          **Date du backup :** ${{ env.BACKUP_DATE }}
          **Projet Supabase :** mkbchdhbgdynxwfhpxbw
          **Statut :** PRODUCTION

          ---

          ## 📦 CONTENU DE CE BACKUP

          - `schema.sql` - Structure complète de la base (tables, contraintes, RLS, functions)
          - `data.sql` - Toutes les données métier (users, planning, textes, etc.)
          - `auth_users.sql` - Comptes utilisateurs et authentification
          - `RESTORE.md` - Ce guide

          ---

          ## ⚠️ SCÉNARIOS DE RESTAURATION

          ### Scénario A : Restauration sur le MÊME projet (Transparent)

          **Utiliser quand :**
          - Erreur humaine (DELETE accidentel, UPDATE destructeur)
          - Migration ratée
          - Corruption de données
          - Erreur de Claude Code

          **Procédure :**

          ```bash
          # 1. Se connecter au projet actuel
          export DB_URL="${{ secrets.SUPABASE_DB_URL }}"

          # 2. Restaurer la structure
          psql $DB_URL < schema.sql

          # 3. Restaurer les données métier
          psql $DB_URL < data.sql

          # 4. Restaurer les utilisateurs
          psql $DB_URL < auth_users.sql
          ```

          **Résultat :**
          - ✅ **Restauration transparente**
          - ✅ Application continue de fonctionner
          - ✅ Aucun changement d'URL
          - ✅ Aucune intervention sur l'application
          - ⏱️ Temps : 10-15 minutes

          ---

          ### Scénario B : Restauration sur un NOUVEAU projet (Redéploiement)

          **Utiliser quand :**
          - Projet Supabase détruit/supprimé
          - Compte piraté
          - Catastrophe totale
          - Migration vers nouveau projet

          **Procédure :**

          ```bash
          # 1. Créer un nouveau projet Supabase
          # Via https://supabase.com/dashboard
          # Notez le nouveau project-ref : XXXXXXX

          # 2. Récupérer la nouvelle URL de connexion
          # Settings > Database > Connection Pooling
          export NEW_DB_URL="postgresql://postgres.XXXXXXX:[PASSWORD]@aws-1-eu-west-3.pooler.supabase.com:5432/postgres"

          # 3. Restaurer la structure
          psql $NEW_DB_URL < schema.sql

          # 4. Restaurer les données
          psql $NEW_DB_URL < data.sql

          # 5. Restaurer les utilisateurs
          psql $NEW_DB_URL < auth_users.sql

          # 6. Mettre à jour les variables d'environnement
          # Fichier : .env.local ou .env.production
          NEXT_PUBLIC_SUPABASE_URL=https://XXXXXXX.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY=[nouvelle_anon_key]
          SUPABASE_SERVICE_ROLE_KEY=[nouvelle_service_role_key]

          # 7. Redéployer l'application
          vercel --prod  # ou votre méthode de déploiement
          ```

          **Résultat :**
          - ✅ Toutes les données restaurées
          - ✅ Tous les utilisateurs conservés
          - ⚠️ Nouvelle URL (changement unique)
          - ⚠️ Redéploiement nécessaire
          - ⏱️ Temps : 30-45 minutes

          ---

          ## 🔒 CE QUI EST PROTÉGÉ

          ### Protection Totale (Restauration Transparente) :
          - ✅ DELETE accidentel
          - ✅ UPDATE destructeur
          - ✅ DROP TABLE par erreur
          - ✅ Migration ratée
          - ✅ Corruption de données
          - ✅ Erreur de Claude Code
          - ✅ Modification RLS incorrecte

          ### Protection Complète (Restauration avec Redéploiement) :
          - ✅ Projet Supabase supprimé
          - ✅ Compte piraté
          - ✅ Catastrophe technique
          - ✅ Malveillance extérieure

          ---

          ## ⏱️ CALENDRIER DES BACKUPS

          - **Fréquence :** Chaque nuit à 2h00 UTC (3h00 Paris)
          - **Rétention :** 7 derniers backups conservés
          - **Perte maximale :** 24 heures de données

          ---

          ## 📊 INFORMATIONS TECHNIQUES

          **Tailles estimées :**
          - schema.sql : 10-50 Ko
          - data.sql : 500 Ko - 2 Mo
          - auth_users.sql : 5-20 Ko

          **Tables sauvegardées :** 50+ tables
          **Lignes estimées :** 2000+ lignes
          **Utilisateurs :** Tous les comptes auth

          ---

          ## 🆘 EN CAS D'URGENCE

          1. **Identifier le problème**
          2. **Choisir le bon scénario** (A ou B)
          3. **Trouver le dernier backup valide** (avant l'incident)
          4. **Suivre la procédure** étape par étape
          5. **Vérifier** que l'application fonctionne
          6. **Tester** une connexion utilisateur

          ---

          ## ✅ CHECKLIST POST-RESTAURATION

          - [ ] Base de données restaurée
          - [ ] Schéma complet présent
          - [ ] Données visibles dans l'app
          - [ ] Connexion utilisateur fonctionnelle
          - [ ] RLS policies actives
          - [ ] Application accessible
          - [ ] Tests de base réussis

          ---

          **Ce backup protège votre production contre toute catastrophe ! 🛡️**
          EOF
      
      - name: 📈 Show backup summary
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ BACKUP COMPLET PRODUCTION"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📁 Backup directory: $BACKUP_DIR"
          echo ""
          echo "📦 Files created:"
          ls -lh $BACKUP_DIR/
          echo ""
          echo "📊 File sizes:"
          du -h $BACKUP_DIR/*
          echo ""
          echo "📝 Line counts:"
          wc -l $BACKUP_DIR/*.sql $BACKUP_DIR/*.md
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
      
      - name: 💾 Commit and push backup
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions Bot"
          git add backups/
          git commit -m "💾 Backup PRODUCTION $(date '+%Y-%m-%d %H:%M:%S')

          ✅ Schema (structure)
          ✅ Data (données métier)  
          ✅ Auth users (utilisateurs)
          ✅ RESTORE.md (guide)
          
          🤖 Generated with Claude Code" || exit 0
          git push
      
      - name: 🧹 Cleanup old backups (keep last 7)
        run: |
          cd backups
          # Compter les backups
          BACKUP_COUNT=$(ls -d */ 2>/dev/null | wc -l)
          echo "📊 Total backups: $BACKUP_COUNT"
          
          if [ $BACKUP_COUNT -gt 7 ]; then
            echo "🧹 Cleaning old backups (keeping last 7)..."
            ls -dt */ | tail -n +8 | xargs rm -rf
            git add .
            git commit -m "🧹 Cleanup: Keep last 7 backups" || exit 0
            git push
          else
            echo "✅ No cleanup needed ($BACKUP_COUNT backups)"
          fi
